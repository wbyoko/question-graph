(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["chunk-common"],{

/***/ "./src/graph/benefitsGraph.js":
/*!************************************!*\
  !*** ./src/graph/benefitsGraph.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.concat */ \"./node_modules/core-js/modules/es.array.concat.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.map */ \"./node_modules/core-js/modules/es.array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.exec */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.split */ \"./node_modules/core-js/modules/es.string.split.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.trim */ \"./node_modules/core-js/modules/es.string.trim.js\");\n\nvar _createForOfIteratorHelper = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/createForOfIteratorHelper */ \"./node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\");\n\nvar _require = __webpack_require__(/*! ./question-graph */ \"./src/graph/question-graph.js\"),\n    QuestionGraph = _require.QuestionGraph;\n\nvar csvjson = __webpack_require__(/*! csvjson */ \"./node_modules/csvjson/index.js\");\n\nvar _require2 = __webpack_require__(/*! expression-eval */ \"./node_modules/expression-eval/dist/expression-eval.module.js\"),\n    compile = _require2.compile;\n\nvar csvOptions = {\n  delimiter: ',',\n  // optional\n  quote: '\"' // optional\n\n};\n\nfunction isString(s) {\n  return typeof s === \"string\";\n}\n\nvar benefitResultsCSV = \"done,identifier,provider,agency,name,url\\nx,parentBenefit,Federal Government,Social Security,Parent's benefits,https://www.ssa.gov/forms/ssa-7.html\\nx,widowersBenefit,Federal Government,Social Security,Widow(er) or surviving divorced spouse benefits,https://www.ssa.gov/forms/ssa-10.html\\nx,motherFatherBenefit,Federal Government,Social Security,Mother's or Father's benefits,https://www.ssa.gov/forms/ssa-5.html\\nx,lumpSumBenefit,Federal Government,Social Security,Lump-Sum Death Benefit,https://www.ssa.gov/forms/ssa-8.html\\nx,childBenefit,Federal Government,Social Security,Child Benefits,https://www.ssa.gov/forms/ssa-4.html\\nx,burialAllowance,Federal Government,Veterans Affairs,Burial allowance,https://www.va.gov/burials-memorials/veterans-burial-allowance/\\nx,burialNationalCemetery,Federal Government,Veterans Affairs,Burial in a national cemetery,https://www.va.gov/burials-memorials/eligibility/\\nx,verteransHeadstone,Federal Government,Veterans Affairs,Veterans headstone or grave marker,https://www.va.gov/burials-memorials/memorial-items/headstones-markers-medallions/\\nx,bereavementCounseling,Federal Government,Veterans Affairs,Bereavement counseling,http://www.vetcenter.va.gov/Bereavement_Counseling.asp\\nx,vaLifeInsurance,Federal Government,Veterans Affairs,VA Life Insurance - SGLI,https://www.va.gov/life-insurance/\\nx,dependencyIndemnityCompensation,Federal Government,Veterans Affairs,VA Dependency and Indemnity Compensation,https://www.va.gov/disability/dependency-indemnity-compensation/\\nx,survivorsPension,Federal Government,Veterans Affairs,Survivors Pension,https://www.va.gov/pension/survivors-pension/\\nx,healthCareBenefit,Federal Government,Veterans Affairs,Health care benefits,https://www.va.gov/health-care/family-caregiver-benefits/\\nx,educationalBenefit,Federal Government,Veterans Affairs,Educational benefits,https://www.va.gov/education/survivor-dependent-benefits/\\nx,homeLoan,Federal Government,Veterans Affairs,Home Loans,https://www.va.gov/housing-assistance/home-loans/surviving-spouse/\\nx,monthOfDeath,Federal Government,Veterans Affairs,Veterans Month of Death Benefits,https://www.benefits.va.gov/BENEFITS/docs/VASurvivorsKit.pdf\\n,groupLifeInsurance,Federal Government,Veterans Affairs,VA Family Servicemembers\\u2019 Group Life Insurance,\\n,financialCounseling,Federal Government,Veterans Affairs,Beneficiary financial counseling services,\\n,publicSafetyOfficerBenefitsDeath,Federal Government,Bureau of Justice Assitance,Public Safety Officers' Benefits - Death,https://psob.bja.ojp.gov/benefits/\\n,publicSafetyOfficerBenefitsEducation,Federal Government,Bureau of Justice Assitance,Public Safety Officers' Benefits - Education,https://psob.bja.ojp.gov/benefits/\\n,dodHomeownerAssistanceProgram,Federal Government,Department of Defense,DOD Homeowners Assistance Program,https://www.usace.army.mil/Missions/Military-Missions/Real-Estate/HAP/\\n,dodSurvivorBenefitPlan,Federal Government,Department of Defense,DOD Survivor Benefit Plan,https://militarypay.defense.gov/Benefits/Survivor-Benefit-Program/\\n,dodDeathGratuity,Federal Government,Department of Defense,DOD Death Gratuity,https://militarypay.defense.gov/Benefits/Death-Gratuity/\\nx,dojDeathBenefit,Federal Government,DOJ - Bureau of Justice Assistance,PSOB - Death Benefits,https://psob.bja.ojp.gov/benefits/\\nx,dojEducationBenefit,Federal Government,DOJ - Bureau of Justice Assistance,PSOB Education Benefits,https://psob.bja.ojp.gov/PSOB_Education2018.pdf\";\nvar questionsCSV = \"identifier,question,type,choices,dependencies\\nrelationship,What is your relationship to the deceased?,multi-choice,\\\"Parent, Spouse, Divorced Spouse, Parent to Child of the deceased, Child, Dependent non-biological child\\\",\\nwork,Was the deceased ever have a job?,yes/no,,\\nlineOfDuty,Is the deceased a Service Member who died in the line of duty?,yes/no,,\\nserviceInjury,Is the deceased a Veteran who died from a service related injury / illness?,yes/no,,\\npublicSafetyOfficer,Is the deceased a first responer / public safety officer?,yes/no,,\\\"relationship = spouse, child\\\"\\nage,What is your age as the survivor?,number,,\\ndependant,Are you a dependant of the deceased?,yes/no,,relationship = parent\\ndisabled,Are you disabled?,yes/no,,\\\"relationship = spouse, divorced spouse, child\\\"\\ncaringForChild,Are you taking care of a child less than 16 or disabled?,yes/no,,\\\"relationship = spouse, divorced spouse, parent to child\\\"\\nunmarried,are you unmarried?,yes/no,,\\\"relationship = spouse, divorced spouse, parent to child, child\\\"\\nmarried10Years,Did your marriage last for at least 10 years?,yes/no,,relationship = divorced spouse\\nfullTimeStudent,Are you a full time student?,yes/no,,relationship = child; age = 18-19\\nnoSurvivingSpouse,Is there no surviving spouse?,yes/no,,relationship = child\\ndisabledBefore18,Were you disabled before 18?,yes/no,,\\\"relationship = child; age >= 18; deceased = veteran, service member\\\"\\ndisabledBefore22,Were you disabled before 22?,yes/no,,relationship = child; age >=19\\nstudentAtVASchool,Are you a student at a VA approved school,yes/no,,relationship = child; age = 18-23; deceased = veteran\\nhigherEducation,Are you enrolled in higher education?,yes/no,,relationship = child; age = 18-23; deceased = service member\\nsurvivingSpouseDIC,Is surviving spouse receiving DIC benefits?,yes/no,,\\\"relationship = child; age <18, 18-23 (higher education = yes); unmarried = yes; deceased = veteran, service member; \\\"\\nserviceMember,Is the deceased was an active service member?,yes/no,,\\nveteran,Is the deceased a Veteran?,yes/no,,\";\nvar edgesCSV = \"from,to,when\\n,,\\nwork,relationship_work,work\\nveteran,relationship_veteran,veteran\\nserviceMember,relationship_serviceMember,serviceMember\\n,,\\nrelationship_work,age_parent_work,relationship['Parent'] \\nage_parent_work,dependant_over62_parent_work,age > 62\\ndependant_over62_parent_work,parentBenefit,dependant\\n,,\\nrelationship_work,age_spouse_work,relationship['Spouse'] \\nage_spouse_work,widowersBenefit,age >= 60\\nage_spouse_work,disabled_59-50_spouse_work,age < 60 && age >= 50\\ndisabled_59-50_spouse_work,widowersBenefit,disabled\\nrelationship_work,age_divorcedSpouse,relationship['Divorced Spouse']\\nage_divorcedSpouse,married10Years,age >= 60\\nmarried10Years,widowersBenefit,married10Years\\nage_divorcedSpouse,disabled_59-50_divorcedSpouse,age < 60 && age >= 50\\ndisabled_59-50_divorcedSpouse,married10Years,disabled\\n,,\\nrelationship_work,caringForChild_work,relationship['Spouse'] || relationship['Divorced Spouse'] ||  relationship['Parent to Child of the deceased']\\ncaringForChild_work,unmarried_caringForChild_work,caringForChild\\nunmarried_caringForChild_work,motherFatherBenefit,unmarried\\n,,\\nrelationship_work,publicSafetyOfficer_spouse_work,relationship['Spouse'] \\npublicSafetyOfficer_spouse_work,dojEducationBenefit,publicSafetyOfficer\\npublicSafetyOfficer_spouse_work,dojDeathBenefit,publicSafetyOfficer\\nrelationship_work,publicSafetyOfficer_child_work,relationship['Child'] || relationship['Dependent non-biological child']\\npublicSafetyOfficer_child_work,dojEducationBenefit,publicSafetyOfficer\\nrelationship_work,age_childDependant_work,relationship['Child'] || relationship['Dependent non-biological child']\\nage_childDependant_work,publicSafetyOfficer_18_child_work,age <= 18\\npublicSafetyOfficer_18_child_work,dojDeathBenefit,publicSafetyOfficer\\nage_childDependant_work,fullTimeStudent_22_child_work,age <= 22\\nfullTimeStudent_22_child_work,publicSafetyOfficer_student_22_child_work,fullTimeStudent\\npublicSafetyOfficer_student_22_child_work,dojDeathBenefit,publicSafetyOfficer\\n,,\\nrelationship_work,lumpSumBenefit,relationship['Spouse'] \\nrelationship_work,noSurvivingSpouse_child_work,relationship['Child']\\nnoSurvivingSpouse_child_work,lumpSumBenefit,noSurvivingSpouse\\n,,\\nrelationship_work,age_child_work,relationship['Child']\\nage_child_work,unmarried_child_work,age < 18\\nunmarried_child_work,childBenefit,unmarried\\nage_child_work,fullTimeStudent_18_19_child,age >= 18 && age <= 19\\nfullTimeStudent_18_19_child,unmarried_child_work,fullTimeStudent\\nage_child_work,disabledBefore22,age > 19\\ndisabledBefore22,unmarried_child_work,disabledBefore22\\n,,\\nveteran,burialAllowance,veteran\\nveteran,burialNationalCemetery,veteran\\nveteran,verteransHeadstone,veteran\\nveteran,bereavementCounseling,veteran\\nveteran,vaLifeInsurance,veteran\\nveteran,healthCareBenefit,veteran\\n,,\\nrelationship_veteran,homeLoan,relationship['Spouse']\\nrelationship_veteran,monthOfDeath,relationship['Spouse']\\n,,\\nrelationship_veteran,serviceInjury_spouseChild_veteran,relationship['Spouse'] || relationship['Child']\\nserviceInjury_spouseChild_veteran,educationalBenefit,serviceInjury\\n,,\\nrelationship_veteran,serviceInjury_parent_veteran,relationship['Parent'] \\nserviceInjury_parent_veteran,dependencyIndemnityCompensation,serviceInjury\\nrelationship_veteran,serviceInjury_spouse_veteran,relationship['Spouse'] \\nserviceInjury_spouse_veteran,dependencyIndemnityCompensation,serviceInjury\\nrelationship_veteran,age_child_veteran,relationship['Child']\\nage_child_veteran,unmarried_under18_child_veteran,age < 18\\nunmarried_under18_child_veteran,survivingSpouseDIC_child_veteran,unmarried\\nsurvivingSpouseDIC_child_veteran,serviceInjury_noSurvivingBenefits_child_veteran,!survivingSpouseDIC\\nserviceInjury_noSurvivingBenefits_child_veteran,dependencyIndemnityCompensation,serviceInjury\\nage_child_veteran,studentAtVASchool_under23_child_veteran,age < 23\\nstudentAtVASchool_under23_child_veteran,unmarried_studentVA_under23_child_veteran,studentAtVASchool\\nunmarried_studentVA_under23_child_veteran,survivingSpouseDIC_child_veteran,unmarried\\n,,\\nunmarried_under18_child_veteran,survivorsPension,unmarried\\nunmarried_studentVA_under23_child_veteran,survivorsPension,unmarried\\nrelationship_veteran,unmarried_spouse_veteran,relationship['Spouse'] \\nunmarried_spouse_veteran,survivorsPension,unmarried\\nage_child_veteran,disabledBefore18_over18_child_veteran,age > 18\\ndisabledBefore18_over18_child_veteran,unmarried_disabled_over18_child_veteran,disabledBefore18\\nunmarried_disabled_over18_child_veteran,survivorsPension,unmarried\\nage_child_veteran,studentAtVASchool_18-23_child_veteran,age <= 23 && age >=18\\nstudentAtVASchool_18-23_child_veteran,unmarried_student_18-23_child_veteran,studentAtVASchool\\nunmarried_student_18-23_child_veteran,survivorsPension,unmarried\\n,,\\nserviceMember,dodDeathGratuity,serviceMember\\nserviceMember,bereavementCounseling,serviceMember\\nserviceMember,vaLifeInsurance,serviceMember\\n,,\\nrelationship_serviceMember,dodHomeownerAssistanceProgram,relationship['Spouse'] \\nrelationship_serviceMember,homeLoan,relationship['Spouse'] \\n,,\\nrelationship_serviceMember,lineOfDuty_parent_serviceMember,relationship['Parent'] \\nlineOfDuty_parent_serviceMember,dependencyIndemnityCompensation,lineOfDuty\\nrelationship_serviceMember,lineOfDuty_spouse_serviceMember,relationship['Spouse'] \\nlineOfDuty_spouse_serviceMember,dependencyIndemnityCompensation,lineOfDuty\\nrelationship_serviceMember,age_child_serviceMember,relationship['Child']\\nage_child_serviceMember,unmarried_under18_child_serviceMember,age < 18\\nunmarried_under18_child_serviceMember,survivingSpouseDIC_child_serviceMember,unmarried\\nsurvivingSpouseDIC_child_serviceMember,lineOfDuty_noSurvivingBenefits_child_serviceMember,!survivingSpouseDIC\\nlineOfDuty_noSurvivingBenefits_child_serviceMember,dependencyIndemnityCompensation,lineOfDuty\\nage_child_serviceMember,higherEducation_18-23_child_serviceMember,age <= 23 && age >=18\\nhigherEducation_18-23_child_serviceMember,unmarried_higherEducation_18-23_child_serviceMember,higherEducation\\nunmarried_higherEducation_18-23_child_serviceMember,survivingSpouseDIC_child_serviceMember,unmarried\\n,,\\nlineOfDuty_spouse_serviceMember,educationalBenefit,lineOfDuty\\nrelationship_serviceMember,lineOfDuty_child_serviceMember,relationship['Child']\\nlineOfDuty_child_serviceMember,educationalBenefit,lineOfDuty\\n,,\\nrelationship_serviceMember,age_spouse_serviceMember,relationship['Spouse'] \\nage_spouse_serviceMember,dodSurvivorBenefitPlan,age >= 55\\nunmarried_under18_child_serviceMember,dodSurvivorBenefitPlan,unmarried\\nage_child_serviceMember,disabledBefore18_over18_child_serviceMember,age >= 18\\ndisabledBefore18_over18_child_serviceMember,unmarried_disabled_over18_child_serviceMember,disabledBefore18\\nunmarried_disabled_over18_child_serviceMember,dodSurvivorBenefitPlan,unmarried\\nage_child_serviceMember,higherEducation_18-22_child_serviceMember,age <= 22 && age >=18\\nhigherEducation_18-22_child_serviceMember,unmarried_higherEducation_18-22_child_serviceMember,higherEducation\\nunmarried_higherEducation_18-22_child_serviceMember,dodSurvivorBenefitPlan,unmarried\";\nvar benefitJson = csvjson.toObject(benefitResultsCSV, csvOptions);\nvar questionJson = csvjson.toObject(questionsCSV, csvOptions);\nvar edgeJson = csvjson.toObject(edgesCSV, csvOptions);\nconsole.log(benefitJson, questionJson, edgeJson);\nvar benefitsGraph = new QuestionGraph();\n\nvar _iterator = _createForOfIteratorHelper(benefitJson),\n    _step;\n\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    var result = _step.value;\n    benefitsGraph.addResult(result.identifier, result);\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\n\nvar _iterator2 = _createForOfIteratorHelper(questionJson),\n    _step2;\n\ntry {\n  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n    var question = _step2.value;\n\n    if (question.choices) {\n      question.choice = question.choices.split(',').map(function (s) {\n        return s.trim();\n      });\n    }\n\n    benefitsGraph.addQuestion(question.identifier, question);\n  }\n} catch (err) {\n  _iterator2.e(err);\n} finally {\n  _iterator2.f();\n}\n\nvar _iterator3 = _createForOfIteratorHelper(edgeJson),\n    _step3;\n\ntry {\n  var _loop = function _loop() {\n    var edge = _step3.value;\n\n    var noop = function noop() {};\n\n    var getCreateNodeFromLabel = function getCreateNodeFromLabel(label) {\n      var node = benefitsGraph.nodeMap.get(label);\n      var questionId;\n\n      if (!node) {\n        questionId = label.split('_')[0];\n        console.log(questionId, 'new quesitons');\n\n        var _question = benefitsGraph.questionMap.get(questionId);\n\n        if (_question) {\n          node = benefitsGraph.addVertex(label, questionId);\n        } else {\n          console.warn(\"no node \".concat(label, \" or question \").concat(questionId, \" exists\"));\n          return {};\n        }\n      } else {\n        if (node.data && isString(node.data)) {\n          questionId = node.data;\n        }\n      }\n\n      return {\n        node: node,\n        questionId: questionId\n      };\n    };\n\n    var from = getCreateNodeFromLabel(edge.from);\n    var to = getCreateNodeFromLabel(edge.to);\n    console.log(edge.from, from, edge.to, to);\n\n    if (from.node && to.node) {\n      var when = function (from) {\n        var compiled = edge.when && compile(edge.when);\n        return function (data) {\n          if (data[from.questionId] != null) {\n            var res = !!(compiled || noop)(data);\n            console.log(from.node.id, from.questionId, edge.when, res);\n            return res;\n          }\n        };\n      }(from);\n\n      benefitsGraph.addEdge(edge.from, edge.to, when);\n    }\n  };\n\n  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n    _loop();\n  }\n} catch (err) {\n  _iterator3.e(err);\n} finally {\n  _iterator3.f();\n}\n\nconsole.log('benefitsGraph loaded', benefitsGraph);\nbenefitsGraph.finalize();\nmodule.exports = {\n  questionGraph: benefitsGraph\n};\n\n//# sourceURL=webpack:///./src/graph/benefitsGraph.js?");

/***/ }),

/***/ "./src/graph/question-graph.js":
/*!*************************************!*\
  !*** ./src/graph/question-graph.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.from */ \"./node_modules/core-js/modules/es.array.from.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.map */ \"./node_modules/core-js/modules/es.array.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.map */ \"./node_modules/core-js/modules/es.map.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.set */ \"./node_modules/core-js/modules/es.set.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.iterator */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\nvar _objectSpread = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/objectSpread2 */ \"./node_modules/@babel/runtime/helpers/objectSpread2.js\");\n\nvar _slicedToArray = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\");\n\nvar _createForOfIteratorHelper = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/createForOfIteratorHelper */ \"./node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\");\n\nvar _createClass = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\");\n\nvar _classCallCheck = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n\nfunction isString(s) {\n  return typeof s === \"string\";\n}\n\nvar Node = function Node(id, data) {\n  \"use strict\";\n\n  _classCallCheck(this, Node);\n\n  this.id = id;\n  this.data = data;\n  this.edges = [];\n};\n\nvar noop = function noop() {};\n\nvar Edge = function Edge(toId, question) {\n  \"use strict\";\n\n  _classCallCheck(this, Edge);\n\n  this.toId = toId;\n  this.question = question || noop;\n};\n\nvar QuestionGraph = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function QuestionGraph() {\n    _classCallCheck(this, QuestionGraph);\n\n    this.nodeMap = new Map();\n    this.questionMap = new Map();\n    this.headIds = new Set();\n    this.resultIds = new Set();\n    this.nodeIds = new Set();\n    this.final = false;\n    this.head = new Node(\"headId\");\n  }\n\n  _createClass(QuestionGraph, [{\n    key: \"addVertex\",\n    value: function addVertex(nodeId, data) {\n      if (this.final) {\n        throw new Error(\"Graph has been finalized\");\n      }\n\n      var newNode = new Node(nodeId, data);\n      this.nodeMap.set(nodeId, newNode);\n      this.headIds.add(nodeId);\n      return newNode;\n    }\n  }, {\n    key: \"addQuestion\",\n    value: function addQuestion(questionId, data, addAsVertex) {\n      if (this.final) {\n        throw new Error(\"Graph has been finalized\");\n      }\n\n      if (this.questionMap.has(questionId)) {\n        throw new Error(\"Result \".concat(questionId, \" already exists as a question\"));\n      }\n\n      if (this.resultIds.has(questionId)) {\n        throw new Error(\"Result \".concat(questionId, \" already exists as a result\"));\n      }\n\n      this.questionMap.set(questionId, data);\n\n      if (addAsVertex) {\n        this.addVertex(questionId, questionId);\n      }\n    }\n  }, {\n    key: \"addResult\",\n    value: function addResult(resultId, data) {\n      if (this.final) {\n        throw new Error(\"Graph has been finalized\");\n      }\n\n      if (this.resultIds.has(resultId)) {\n        throw new Error(\"Result \".concat(resultId, \" already exists as result\"));\n      }\n\n      if (this.questionMap.has(resultId)) {\n        throw new Error(\"Result \".concat(resultId, \" already exists as a question\"));\n      }\n\n      this.resultIds.add(resultId);\n      this.addVertex(resultId, data);\n    }\n  }, {\n    key: \"addEdge\",\n    value: function addEdge(fromId, toId, question) {\n      if (this.final) {\n        throw new Error(\"Graph has been finalized\");\n      }\n\n      var fromNode = this.nodeMap.get(fromId);\n\n      if (!fromNode) {\n        throw new Error(\"From node \".concat(fromId, \" does not exist\"));\n      }\n\n      var toNode = this.nodeMap.get(fromId);\n\n      if (!toNode) {\n        throw new Error(\"To node \".concat(toNode, \" does not exist\"));\n      }\n\n      fromNode.edges.push(new Edge(toId, question));\n      this.headIds.delete(toId);\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      var _this = this;\n\n      // make sure all questions lead to some result\n      var allQuestionsAndResultsPossible = function allQuestionsAndResultsPossible() {\n        var found = new Set();\n        var vis = new Set();\n\n        var dfs = function dfs(nodeId) {\n          if (!nodeId) return;\n          if (vis.has(nodeId)) return;\n          vis.add(nodeId);\n\n          var node = _this.nodeMap.get(nodeId);\n\n          if (!node) return;\n          var data = node.data;\n\n          if (data && isString(data)) {\n            found.add(data);\n          }\n\n          var _iterator = _createForOfIteratorHelper(node.edges),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var edge = _step.value;\n              var toId = edge.toId;\n              dfs(toId);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        };\n\n        var _iterator2 = _createForOfIteratorHelper(_this.headIds),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var nodeId = _step2.value;\n            dfs(nodeId);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        var _iterator3 = _createForOfIteratorHelper(_this.questionMap),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var entry = _step3.value;\n            var key = entry[0];\n\n            if (!found.has(key)) {\n              // throw new Error(`Question ${key} is not linked in the graph`);\n              console.warn(\"removing question \".concat(key));\n\n              _this.questionMap.delete(key);\n\n              _this.headIds.delete(key);\n\n              _this.nodeMap.delete(key);\n\n              _this.resultIds.delete(key);\n\n              _this.nodeIds.delete(key);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        var _iterator4 = _createForOfIteratorHelper(_this.resultIds),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var resultId = _step4.value;\n\n            if (!vis.has(resultId)) {\n              throw new Error(\"Result \".concat(resultId, \" is not linked in the graph\"));\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      };\n\n      allQuestionsAndResultsPossible();\n\n      var noResultsFromHead = function noResultsFromHead() {\n        var _iterator5 = _createForOfIteratorHelper(_this.headIds),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var headId = _step5.value;\n\n            if (_this.resultIds.has(headId)) {\n              console.warn(\"removing head result \".concat(headId));\n\n              _this.questionMap.delete(headId);\n\n              _this.headIds.delete(headId);\n\n              _this.nodeMap.delete(headId);\n\n              _this.resultIds.delete(headId);\n\n              _this.nodeIds.delete(headId);\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      };\n\n      noResultsFromHead();\n      this.final = true; // setup head node;\n\n      var _iterator6 = _createForOfIteratorHelper(this.headIds),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var headId = _step6.value;\n          this.head.edges.push(new Edge(headId));\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    } //bfs to find to next question based off data\n\n  }, {\n    key: \"getNextQuestion\",\n    value: function getNextQuestion() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var vis = new Set();\n      var q = [this.head];\n\n      while (q.length) {\n        var item = q.shift();\n\n        if (!vis.has(item.id)) {\n          vis.add(item.id); // check if submittable question\n\n          if (item.data && isString(item.data)) {\n            var questionId = item.data;\n\n            if (data[questionId] == null) {\n              var question = this.questionMap.get(questionId);\n              return {\n                questionId: questionId,\n                question: question\n              };\n            }\n          }\n\n          var _iterator7 = _createForOfIteratorHelper(item.edges),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var edge = _step7.value;\n              var edgeRes = edge.question(data); // allow possibles\n\n              if (edgeRes !== false) {\n                q.push(this.nodeMap.get(edge.toId));\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n      }\n    } //bfs search to find all the valid questions.if not STOP;\n\n  }, {\n    key: \"getRemainingQuestions\",\n    value: function getRemainingQuestions() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var vis = new Set();\n      var questionIds = new Set();\n      var q = [this.head];\n\n      while (q.length) {\n        var item = q.shift();\n\n        if (!vis.has(item.id)) {\n          vis.add(item.id);\n          console.log(item.id); // check if submittable question\n\n          if (item.data && isString(item.data)) {\n            var questionId = item.data;\n            console.log(questionId);\n\n            if (data[questionId] == null) {\n              questionIds.add(questionId);\n            }\n          }\n\n          console.log(item);\n\n          var _iterator8 = _createForOfIteratorHelper(item.edges),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var edge = _step8.value;\n              var edgeRes = edge.question(data);\n              console.log(edge.toId, edgeRes); // allow possibles\n\n              if (edgeRes !== false) {\n                q.push(this.nodeMap.get(edge.toId));\n              }\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n        }\n      }\n\n      console.log('what questions', questionIds);\n      var res = [];\n\n      var _iterator9 = _createForOfIteratorHelper(questionIds),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _questionId = _step9.value;\n          var question = this.questionMap.get(_questionId);\n          res.push({\n            questionId: _questionId,\n            question: question\n          });\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return res;\n    } //bfs to find possible results / return the impossible results as well\n\n  }, {\n    key: \"getPossibleResultsIds\",\n    value: function getPossibleResultsIds() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var vis = new Set();\n      var resultIds = new Set();\n      var q = [this.head];\n\n      while (q.length) {\n        var item = q.shift();\n\n        if (!vis.has(item.id)) {\n          vis.add(item.id); // check if result\n\n          if (item.data && !isString(item.data)) {\n            var resultId = item.id;\n            resultIds.add(resultId);\n          }\n\n          var _iterator10 = _createForOfIteratorHelper(item.edges),\n              _step10;\n\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var edge = _step10.value;\n              var edgeRes = edge.question(data); // allow possibles\n\n              if (edgeRes !== false) {\n                q.push(this.nodeMap.get(edge.toId));\n              }\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n        }\n      }\n\n      return Array.from(resultIds);\n    } //bfs to find possible results\n\n  }, {\n    key: \"getPossibleResults\",\n    value: function getPossibleResults() {\n      var _this2 = this;\n\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var possibleResultIds = this.getPossibleResultsIds(data);\n      return possibleResultIds.map(function (resultId) {\n        var result = _this2.nodeMap.get(resultId);\n\n        return {\n          resultId: resultId,\n          result: result\n        };\n      });\n    } //bfs to find the impossible results\n\n  }, {\n    key: \"getImpossibleResults\",\n    value: function getImpossibleResults() {\n      var _this3 = this;\n\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var impossibleResultIds = [];\n      var possibleResultIds = new Set(this.getPossibleResultsIds(data));\n\n      var _iterator11 = _createForOfIteratorHelper(this.resultIds),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var resultId = _step11.value;\n\n          if (!possibleResultIds.has(resultId)) {\n            impossibleResultIds.push(resultId);\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      return impossibleResultIds.map(function (resultId) {\n        var result = _this3.nodeMap.get(resultId);\n\n        return {\n          resultId: resultId,\n          result: result\n        };\n      });\n    } //bfs to find the impossible results\n\n  }, {\n    key: \"getCompletedQuestions\",\n    value: function getCompletedQuestions() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var results = [];\n\n      var _iterator12 = _createForOfIteratorHelper(this.questionMap),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var _step12$value = _slicedToArray(_step12.value, 2),\n              questionId = _step12$value[0],\n              question = _step12$value[1];\n\n          if (data[questionId] != null) {\n            results.push(_objectSpread(_objectSpread({}, question), {}, {\n              questionId: questionId\n            }));\n          }\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      return results;\n    }\n  }]);\n\n  return QuestionGraph;\n}();\n\nmodule.exports = {\n  QuestionGraph: QuestionGraph\n};\n\n//# sourceURL=webpack:///./src/graph/question-graph.js?");

/***/ }),

/***/ 2:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack:///util_(ignored)?");

/***/ }),

/***/ 3:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack:///util_(ignored)?");

/***/ })

}]);